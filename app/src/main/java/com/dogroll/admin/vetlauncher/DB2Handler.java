package com.dogroll.admin.vetlauncher;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.graphics.Bitmap;
import android.net.Uri;
import android.util.Log;
import com.dogroll.admin.vetlauncher.Models.client;
import com.dogroll.admin.vetlauncher.Models.stockItems;
import com.dogroll.admin.vetlauncher.Models.uploadItems;
import java.util.ArrayList;
import java.util.List;


public class DB2Handler extends SQLiteOpenHelper {

    private static final int DATABASE_VERSION = 2;
    private static final String DATABASE_NAME = "Paid.db";

    private static final String TABLE_NAME = "stocklist";
    private static final String COLUMN_1 = "id";
    private static final String COLUMN_2 = "vpmsCode";
    private static final String COLUMN_3 = "product";
    private static final String COLUMN_4 = "grouping";
    private static final String COLUMN_5 = "barcode";
    private static final String COLUMN_6 = "onHand";

    private static final String TABLE_NAME_vn = "vetnotifications";
    private static final String COLUMN_1vn = "id";
    private static final String COLUMN_2vn = "category";
    private static final String COLUMN_3vn = "item";
    private static final String COLUMN_4vn = "timestamp";

    private static final String TABLE_NAME_cl = "clientlist";
    private static final String COLUMN_1cl = "id";
    private static final String COLUMN_2cl = "farmName";
    private static final String COLUMN_3cl = "dairyNumber";
    private static final String COLUMN_4cl = "contactName";
    private static final String COLUMN_5cl = "number";
    private static final String COLUMN_6cl = "address";
    private static final String COLUMN_7cl = "timestamp";

    private static final String TABLE_NAME_su = "stockUpload";
    private static final String COLUMN_1su = "id";
    private static final String COLUMN_2su = "vpmsCode";
    private static final String COLUMN_3su = "productName";
    private static final String COLUMN_4su = "grouping";
    private static final String COLUMN_5su = "count";
    private static final String COLUMN_6su = "user";
    private static final String COLUMN_7su = "status";

    private static final String TABLE_NAME_logo = "logo";
    private static final String COLUMN_1logo = "image";

    private static final String TABLE_NAME_DT = "departmentTransfer";
    private static final String COLUMN_1DT = "id";
    private static final String COLUMN_2DT = "barcode";
    private static final String COLUMN_3DT = "product";
    private static final String COLUMN_4DT = "unit";

    public DB2Handler(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + COLUMN_1 + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                    + COLUMN_2 + " TEXT, "
                    + COLUMN_3 + " TEXT, "
                    + COLUMN_4 + " TEXT, "
                    + COLUMN_5 + " TEXT, "
                    + COLUMN_6 + " TEXT "
                    + ");");

        db.execSQL("CREATE TABLE " + TABLE_NAME_vn + " (" + COLUMN_1vn + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2vn + " TEXT, "
                + COLUMN_3vn + " TEXT, "
                + COLUMN_4vn + " DATETIME DEFAULT CURRENT_TIMESTAMP "
                + ");");

        ContentValues cv = new ContentValues();
        cv.put(COLUMN_2vn, "Unavailable");
        cv.put(COLUMN_3vn, "Available in the paid version");
        cv.put(COLUMN_4vn, "");
        db.insert(TABLE_NAME_vn, null, cv);
        cv.put(COLUMN_2vn, "How it works");
        cv.put(COLUMN_3vn, "In the paid version, someone in your clinic will upload notifications over the internet, either by spreadsheet (for heaps) or individually into your database. Possibilities are limitless, but could include quick reference for Staff birthdays, Dry Cow prices, Medication Prices, Common Procedure estimates");
        cv.put(COLUMN_4vn, "");
        db.insert(TABLE_NAME_vn, null, cv);
        cv.put(COLUMN_2vn, "Security");
        cv.put(COLUMN_3vn, "In the paid version, you and your clinic are issued with a unique Database ID, User name and Password. Only with all 3 will people be able to access your own personal SQL database on the cloud.");
        cv.put(COLUMN_4vn, "");
        db.insert(TABLE_NAME_vn, null, cv);

        db.execSQL("CREATE TABLE " + TABLE_NAME_cl + " (" + COLUMN_1cl + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2cl + " TEXT, "
                + COLUMN_3cl + " TEXT, "
                + COLUMN_4cl + " TEXT, "
                + COLUMN_5cl + " TEXT, "
                + COLUMN_6cl + " TEXT, "
                + COLUMN_7cl + " DATETIME DEFAULT CURRENT_TIMESTAMP "
                + ");");

        ContentValues cv2 = new ContentValues();
        cv2.put(COLUMN_2cl, "Available in the paid version");
        cv2.put(COLUMN_3cl, "98765");
        cv2.put(COLUMN_4cl, "Dave (Owner-Manager)");
        cv2.put(COLUMN_5cl, "0273647655");
        cv2.put(COLUMN_6cl, "18 Arawa Ave, Maketu");
        cv2.put(COLUMN_7cl, "");
        db.insert(TABLE_NAME_cl, null, cv2);

        db.execSQL("CREATE TABLE " + TABLE_NAME_su + " (" + COLUMN_1su + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2su + " TEXT, "
                + COLUMN_3su + " TEXT, "
                + COLUMN_4su + " TEXT, "
                + COLUMN_5su + " TEXT, "
                + COLUMN_6su + " TEXT, "
                + COLUMN_7su + " INTEGER "
                + ");");

        db.execSQL("CREATE TABLE " + TABLE_NAME_logo + " ("
                + COLUMN_1logo + " BLOB "
                + ");");
        ContentValues cv3 = new ContentValues();
        cv3.put(COLUMN_1logo, "");
        db.insert(TABLE_NAME_logo, null, cv3);

        db.execSQL("CREATE TABLE " + TABLE_NAME_DT + " (" + COLUMN_1DT + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2DT + " TEXT, "
                + COLUMN_3DT + " TEXT, "
                + COLUMN_4DT + " TEXT "
                +");");
    }


    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        for (int version = oldVersion +1; version <= newVersion; version++){
            switch (version){
                case 2:
                    db.execSQL("CREATE TABLE " + TABLE_NAME_DT + " (" + COLUMN_1DT + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                            + COLUMN_2DT + " REAL, "
                            + COLUMN_3DT + " REAL, "
                            + COLUMN_4DT + " REAL "
                            +");");
                    break;
                case 3:
                    //nothing yet
                    break;
            }
        }
    }

    void stockListRefresh() {
        SQLiteDatabase db = this.getWritableDatabase();
            db.execSQL(" DROP TABLE IF EXISTS " + TABLE_NAME);
            db.execSQL(" CREATE TABLE " + TABLE_NAME + " (" + COLUMN_1 + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                    + COLUMN_2 + " TEXT, "
                    + COLUMN_3 + " TEXT, "
                    + COLUMN_4 + " TEXT, "
                    + COLUMN_5 + " TEXT, "
                    + COLUMN_6 + " TEXT "
                    + ");");
            db.close();
    }

    void notificationRefresh() {
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL(" DROP TABLE IF EXISTS " + TABLE_NAME_vn);
        db.execSQL(" CREATE TABLE " + TABLE_NAME_vn + " (" + COLUMN_1vn + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2vn + " TEXT, "
                + COLUMN_3vn + " TEXT, "
                + COLUMN_4vn + " DATETIME DEFAULT CURRENT_TIMESTAMP "
                + ");");
        db.close();
    }

    void clientListRefresh() {
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL(" DROP TABLE IF EXISTS " + TABLE_NAME_cl);
        db.execSQL(" CREATE TABLE " + TABLE_NAME_cl + " (" + COLUMN_1cl + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2cl + " TEXT, "
                + COLUMN_3cl + " TEXT, "
                + COLUMN_4cl + " TEXT, "
                + COLUMN_5cl + " TEXT, "
                + COLUMN_6cl + " TEXT, "
                + COLUMN_7cl + " DATETIME DEFAULT CURRENT_TIMESTAMP "
                + ");");
        db.close();
    }

    void stockUploadRefresh(){
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME_su);
        db.execSQL("CREATE TABLE " + TABLE_NAME_su + " (" + COLUMN_1su + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2su + " TEXT, "
                + COLUMN_3su + " TEXT, "
                + COLUMN_4su + " TEXT, "
                + COLUMN_5su + " TEXT, "
                + COLUMN_6su + " TEXT, "
                + COLUMN_7su + " INTEGER "
                + ");");
        db.close();
    }

    void AddStockItem(String vpmsCode, String product, String grouping, String barcode, String onHand){
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues stockItems = new ContentValues();
        stockItems.put(COLUMN_2, vpmsCode);
        stockItems.put(COLUMN_3, product);
        stockItems.put(COLUMN_4, grouping);
        stockItems.put(COLUMN_5, barcode);
        stockItems.put(COLUMN_6, onHand);
        db.insert(TABLE_NAME, null, stockItems);
        db.close();
    }

    void AddVetNotification (String category, String item){
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues notifications = new ContentValues();
        notifications.put(COLUMN_2vn, category);
        notifications.put(COLUMN_3vn, item);
        db.insert(TABLE_NAME_vn, null, notifications);
        db.close();
    }
    void AddClient (String dairyNumber, String farmName, String contactName, String number, String address){
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues clients = new ContentValues();
        clients.put(COLUMN_3cl, dairyNumber);
        clients.put(COLUMN_2cl, farmName);
        clients.put(COLUMN_4cl, contactName);
        clients.put(COLUMN_5cl, number);
        clients.put(COLUMN_6cl, address);
        db.insert(TABLE_NAME_cl, null, clients);
        db.close();
    }

    void AddCountedStockItem (String vpmsCode, String product, String grouping, String count, String user, Integer status){
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues countedStock = new ContentValues();
        countedStock.put(COLUMN_2su, vpmsCode);
        countedStock.put(COLUMN_3su, product);
        countedStock.put(COLUMN_4su, grouping);
        countedStock.put(COLUMN_5su, count);
        countedStock.put(COLUMN_6su, user);
        countedStock.put(COLUMN_7su, status);
        db.insert(TABLE_NAME_su, null, countedStock);
        db.close();
    }

    public void UpdateCountedStockItem (int id){
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("UPDATE " + TABLE_NAME_su + " SET " + COLUMN_7su + "=" + 0 + " WHERE " + COLUMN_1su + "=" + id);
        db.close();
    }

    ArrayList<stockItems> getAllStockItems(){
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_NAME, null);
        ArrayList<stockItems> result = new ArrayList<>();
        if (cursor.moveToFirst()){
            do {
                stockItems sItems = new stockItems();
                sItems.setId(cursor.getInt(cursor.getColumnIndex(COLUMN_1)));
                sItems.setVpmsCode(cursor.getString(cursor.getColumnIndex(COLUMN_2)));
                sItems.setProduct(cursor.getString(cursor.getColumnIndex(COLUMN_3)));
                sItems.setGrouping(cursor.getString(cursor.getColumnIndex(COLUMN_4)));
                sItems.setBarcode(cursor.getString(cursor.getColumnIndex(COLUMN_5)));
                sItems.setOnHand(cursor.getString(cursor.getColumnIndex(COLUMN_6)));
                result.add(sItems);
            } while (cursor.moveToNext());
        } else{
            stockItems sItems = new stockItems(1, "000", "Available in the paid version", "ute", "0000", "0");
            result.add(sItems);
        }
        cursor.close();
        db.close();
        return result;
    }
    int getStocklistCount (){
        int iCount =0;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cCount = db.rawQuery("SELECT COUNT (*) FROM " + TABLE_NAME,null);
        if (cCount.moveToFirst()){
            iCount = cCount.getInt(0);
        }
        cCount.close();
        db.close();
        return iCount;
    }

    List<String> getAllVetNotifications (){
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM "+TABLE_NAME_vn,null);
        List<String> spinnerContent = new ArrayList<>();
        if(cursor.moveToFirst()){
            do{
                spinnerContent.add(cursor.getString(1));
            }while(cursor.moveToNext());
        }
        cursor.close();
        db.close();
        return spinnerContent;
    }
    List<String> getSpecificVetNotification(Integer id){
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM "+TABLE_NAME_vn+" WHERE "+COLUMN_1vn+ " = " +id, null);
        List<String> vNote = new ArrayList<>();

        if (cursor != null)
        {
            if (cursor.moveToFirst())
            {
                String details = cursor.getString(cursor.getColumnIndex(COLUMN_3vn));
                vNote.add(details);
            }
            cursor.close();
            db.close();
        }
        return vNote;
    }

    ArrayList<client> getAllClientDetails(){
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_NAME_cl, null);
        ArrayList<client> result = new ArrayList<>();
        if (cursor.moveToFirst()){
            do {
                client individualClient = new client();
                individualClient.setId(cursor.getInt(cursor.getColumnIndex(COLUMN_1cl)));
                individualClient.setFarmName(cursor.getString(cursor.getColumnIndex(COLUMN_2cl)));
                individualClient.setDairyNumber(cursor.getString(cursor.getColumnIndex(COLUMN_3cl)));
                individualClient.setContactName(cursor.getString(cursor.getColumnIndex(COLUMN_4cl)));
                individualClient.setNumber(cursor.getString(cursor.getColumnIndex(COLUMN_5cl)));
                individualClient.setAddress(cursor.getString(cursor.getColumnIndex(COLUMN_6cl)));
                result.add(individualClient);
            } while (cursor.moveToNext());
        } else{
            client individualClient = new client(1, "Available in the paid version", null, null, null, null);
            result.add(individualClient);
        }
        cursor.close();
        db.close();
        return result;
    }
    ArrayList<uploadItems> showStockToUpload(){
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_NAME_su + " WHERE " + COLUMN_7su +" = " + 1 + " ORDER BY " + COLUMN_3su,null);
        ArrayList<uploadItems> result = new ArrayList<>();
        if (cursor.moveToFirst()){
            do {
                uploadItems uploadItem = new uploadItems();
                uploadItem.setId(cursor.getInt(cursor.getColumnIndex(COLUMN_1su)));
                uploadItem.setProductName(cursor.getString(cursor.getColumnIndex(COLUMN_3su)));
                uploadItem.setCount(cursor.getString(cursor.getColumnIndex(COLUMN_5su)));
                result.add(uploadItem);
            }while (cursor.moveToNext());
        }
        cursor.close();
        db.close();
        return result;
    }

    ContentValues getStockToUpload() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_NAME_su + " WHERE " + COLUMN_7su + " = " + 1, null);
        ContentValues cv = new ContentValues();
        if (cursor.moveToFirst()) {
            if (!cursor.isNull(0)) {
                    try {
                        cv.put("id", cursor.getInt(0));
                        cv.put("vpmsCode", cursor.getString(1));
                        cv.put("productName", cursor.getString(2));
                        cv.put("grouping", cursor.getString(3));
                        cv.put("count", cursor.getString(4));
                        cv.put("uploader", cursor.getString(5));
                    } catch (Exception e) {
                        Log.e("Stock Upload", "Error getting values from DB to send");
                    }
            }
        }
        cursor.close();
        db.close();
        return cv;
    }

    ContentValues processStocktoURIFormat(ContentValues cv) {
        ContentValues result = new ContentValues();
        String uRI;
        try {

            Uri.Builder builder2 = new Uri.Builder()
                .appendQueryParameter("vpmsCode", cv.get("vpmsCode").toString())
                .appendQueryParameter("productName", cv.get("productName").toString())
                .appendQueryParameter("grouping", cv.get("grouping").toString())
                .appendQueryParameter("count", cv.get("count").toString())
                .appendQueryParameter("uploader", cv.get("uploader").toString());
            uRI = builder2.build().getEncodedQuery();
            result.put("URI", uRI);

        } catch (Exception e) {
            Log.e("Error", "Error compiling record to URI");
        }
        Integer id = cv.getAsInteger("id");
        result.put("id", id);

        return result;
    }

    Integer getStockUploadCount (){
        int iCount = 0;
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cCount = db.rawQuery("SELECT COUNT (*) FROM " + TABLE_NAME_su + " WHERE " + COLUMN_7su +" = " + 1,null);
        if (cCount.moveToFirst()){
            iCount = cCount.getInt(0);
        }
        cCount.close();
        db.close();
        return iCount;
    }

    String getAppDBDate(String usage){
        String result ="";
        String query = "";

        SQLiteDatabase db = this.getReadableDatabase();

        switch (usage){
            case "VN":
                query = "SELECT timestamp FROM vetnotifications ORDER BY timestamp DESC LIMIT 1";
                break;
            case "CL":
                query = "SELECT timestamp FROM clientlist ORDER BY timestamp DESC LIMIT 1";
                break;
        }

        Cursor cursor = db.rawQuery(query, null);
        if (cursor.moveToFirst()){
            result = cursor.getString(0);
        }
        cursor.close();
        db.close();
        return result;
    }
    Bitmap getLogo() {
        SQLiteDatabase db = this.getReadableDatabase();
        Bitmap result = null;
        Cursor c = db.rawQuery("SELECT * FROM "+ TABLE_NAME_logo, null);
        if(c.moveToNext())
        {
            String image = c.getString(0);
            result = imageProcessor.convertStringtoBitmap(image);
        }
        c.close();
        db.close();
        return result;}

    void updateLogo (String string64) {
        SQLiteDatabase db = getWritableDatabase();
        ContentValues cv = new ContentValues();
        cv.put(COLUMN_1logo, string64);
        db.update(TABLE_NAME_logo,cv,null,null);
    }
    Boolean isBarcodeList (){
        boolean result = false;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM "+TABLE_NAME_DT,null);
        if (cursor.moveToFirst()){
            int count = cursor.getCount();
            if (count > 0){
                result = true;
            }
        }
        cursor.close();
        db.close();
        return result;
    }

    ArrayList<String> transferProductsList (){
        ArrayList<String> result = new ArrayList<>();
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM "+TABLE_NAME_DT,null);
        if (cursor.moveToFirst()){
            do{
                result.add(cursor.getString(cursor.getColumnIndex(COLUMN_3DT)));
            } while (cursor.moveToNext());
        }
        cursor.close();
        db.close();
        return result;
    }

    ContentValues findProductFromBarcode (String barcode){
        SQLiteDatabase db = this.getReadableDatabase();
        ContentValues values = new ContentValues();
        Cursor cursor = db.rawQuery("SELECT * FROM "+TABLE_NAME_DT+" WHERE "+COLUMN_2DT+ " = " +barcode, null);
        if (cursor.moveToFirst()){
            values.put("product", cursor.getString(cursor.getColumnIndex(COLUMN_3DT)));
            values.put("unit", cursor.getString(cursor.getColumnIndex(COLUMN_4DT)));
        }
        cursor.close();
        db.close();
        return values;
    }
    void dropProductBarcodeList (){
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL(" DROP TABLE IF EXISTS " + TABLE_NAME_DT);
        db.execSQL("CREATE TABLE " + TABLE_NAME_DT + " (" + COLUMN_1DT + " INTEGER PRIMARY KEY AUTOINCREMENT,"
                + COLUMN_2DT + " TEXT, "
                + COLUMN_3DT + " TEXT, "
                + COLUMN_4DT + " TEXT "
                +");");
        db.close();

    }
    void insertProductBarcodeList(String barcode, String product, String unit){
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues();
        cv.put(COLUMN_2DT, barcode);
        cv.put(COLUMN_3DT, product);
        cv.put(COLUMN_4DT, unit);
        long result = db.insert(TABLE_NAME_DT,null, cv);
        db.close();
        if (result < 0){
            Log.e("ProductBarcode", "Error storing barcode");
            }
    }
}